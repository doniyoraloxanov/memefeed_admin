// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        BigInt  @id @default(autoincrement())
  firstName String
  lastName  String?
  username  String? @unique

  languageCode String?
  status       userStatus         @default(ACTIVE)
  role         Role               @default(USER)
  isVerified   VerificationStatus @default(IDLE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  referredUsers  User[]        @relation("ReferredUsers")
  referredById   BigInt?
  referredBy     User?         @relation("ReferredUsers", fields: [referredById], references: [id])
  referralStatus ReferalStatus @default(IDLE)

  point     Point[]
  memes     Meme[]
  favorites Meme[]    @relation("Favorites")
  likes     Like[]
  comments  Comment[]
  followers User[]    @relation("Followers")
  following User[]    @relation("Followers")
  memeViews Meme[]    @relation("MemeViews")

  level         Level          @default(NOOB)
  verifications Verification[]
}

model Point {
  id          String   @id @default(uuid())
  userId      BigInt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Int      @default(0)
  pointReason String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Meme {
  id String @id @default(uuid())

  prompt  String?
  caption String?
  url     String

  createdById BigInt
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favorites User[]    @relation("Favorites")
  likes     Like[]
  comments  Comment[]
  views     User[]    @relation("MemeViews")

  level Level @default(NOOB)

  isPublished Boolean @default(false)
  hidden      Boolean @default(false)
}

model Like {
  id String @id @default(uuid())

  userId BigInt
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  memeId String
  meme   Meme   @relation(fields: [memeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(uuid())

  userId BigInt
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  memeId String
  meme   Meme   @relation(fields: [memeId], references: [id], onDelete: Cascade)

  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ads {
  id          String   @id @default(uuid())
  title       String
  description String
  url         String
  imageUrl    String
  variant     String   @default("default")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Verification {
  id String @id @default(uuid())

  title            String
  shortDescription String?
  description      String?

  isCompleted  Boolean @default(false)
  rewardAmount Float?
  icon         String?
  payload      String?
  url          String?

  userId BigInt?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReferalStatus {
  IDLE
  ACTIVE
}

enum VerificationStatus {
  IDLE   @map("IDEAL")
  PASSED
  FAILED

  @@map("IsVerified")
}

enum Role {
  ADMIN
  USER
}

enum userStatus {
  ACTIVE
  BANNED
  DELETED
}

enum Level {
  NOOB
  GRIFTER
  PLOTTER
  WHEELMAN
  HACKER
  CRYPTOLOGIST
  PHANTOM
  INFILTRATOR
  SAFECRACKER
  MAESTRO
  THE_PROFESSOR
}
